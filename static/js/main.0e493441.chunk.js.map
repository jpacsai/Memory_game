{"version":3,"sources":["types.ts","store/reducers/gameState.ts","store/thunks.ts","config.ts","store/reducers/cards.ts","store/reducers/index.ts","store/actionNames.ts","store/reducers/theme.ts","store/reducers/moves.ts","store/reducers/timer.ts","store/reducers/scores.ts","store/index.ts","store/actionCreators.ts","store/selectors.ts","utils/shuffleDeck.ts","utils/getDeck.ts","utils/createDeck.ts","components/Modal.tsx","components/DashboardButtons.tsx","components/MyButton.tsx","components/Card.tsx","utils/getThemeStyle.ts","components/ThemePreview.tsx","components/ThemeSelect.tsx","components/StartModal.tsx","components/Stars.tsx","components/EndModal.tsx","components/Timer.tsx","components/Moves.tsx","components/PauseModal.tsx","components/RestartModal.tsx","components/Dashboard.tsx","components/CardContainer.tsx","utils/getThemeImageUrls.ts","components/Deck.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","CardStatus","timer","defaultState","START","themes","name","images","style","open","matched","basicCardStyle","combineReducers","gameState","state","arguments","length","undefined","action","type","payload","theme","cards","map","card","cardId","Object","objectSpread","status","OPEN","CLOSED","imageId","MATCHED","moves","scores","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","withExtraArgument","resolveGameState","resolveDeck","deck","resolveTime","clear","getGameState","getTheme","getCards","getOpenCards","createSelector","filter","getOpenCardsCardIDs","getOpenCardsImageIDs","getMatchedCards","getMatchedCardImageIDs","getMoves","getScores","getTimer","getMinutes","seconds","Math","floor","getSeconds","minutes","shuffleDeck","temporaryValue","randomIndex","shuffledDeck","slice","currentIndex","random","getDeck","newDeck","Array","from","x","i","reduce","sum","_","concat","toConsumableArray","id","delayAction","func","time","dispatch","getState","setTimeout","shuffle","restart","clearInterval","checkMatch","openCards","handleMatch","handleNoMatch","resolveMatchedCards","END","Modal","handleClose","onClose","_this","props","handleClick","event","refs","modal","contains","target","document","addEventListener","this","removeEventListener","_this$props","children","title","isOpen","modalClassName","react_default","a","createElement","className","ref","Paper","classnames","onClick","ReactDOM","createPortal","getElementById","React","PureComponent","defaultProps","OpenModal","MyButton","text","centered","color","marginTop","marginBottom","Button","variant","Card","url","image","find","t","getThemeStyle","backgroundColor","src","alt","ThemePreview","selectedOption","urls","index","src_components_Card","key","options","value","label","charAt","toUpperCase","ThemeSelect","getDefaultValue","option","handleChange","setState","onChange","react","react_select_browser_esm","defaultValue","ThemePreview_ThemePreview","connect","mapDispatchToProps","resolveTheme","StartModal","handleSubmit","src_components_Modal","components_ThemeSelect","src_components_MyButton","Stars","full","empty","e","EndModal","min","sec","src_components_Stars","Timer","String","padStart","Moves","PauseModal","RestartModal","onSubmit","pauseTimer","restartTimer","setInterval","DashboardButtons","openModal","handleOpenRestartModal","RESTART","handleCloseRestartModal","handleRestart","handlePause","_this$props2","GAME","PAUSE","components_PauseModal","components_RestartModal","Dashboard","src_components_DashboardButtons","src_components_Timer","src_components_Moves","handleOpenCard","openCardsNumber","resolveOpenCard","startTimer","CardContainer","matchedCards","getThemeImageUrls","includes","Deck","prevProps","src_components_CardContainer","createDeck","App","start","handleStartClose","src_components_StartModal","src_components_Dashboard","src_components_Deck","src_components_EndModal","Boolean","window","location","hostname","match","render","es","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e493441.chunk.js","sourcesContent":["export enum GameState {\r\n  START = 'start',\r\n  GAME = 'game',\r\n  END = 'end'\r\n}\r\n\r\nexport type Cards = {\r\n  name: string;\r\n  images: string[];\r\n  style: CardStyle;\r\n}\r\n\r\nexport type Card = {\r\n  cardId: number;\r\n  imageId: number;\r\n  status: CardStatus;\r\n}\r\n\r\nexport enum CardStatus {\r\n  OPEN = 'open',\r\n  CLOSED = 'closed',\r\n  MATCHED = 'matched'\r\n}\r\n\r\nexport type CardStyle = {\r\n  open: string;\r\n  matched: string;\r\n}","import { RESOLVE_GAME_STATE, CLEAR } from '../actionNames';\r\nimport { GameState } from '../../types';\r\nimport { Actions } from '../actionTypes';\r\n\r\nconst defaultState: GameState = GameState.START;\r\n\r\nexport default (state: GameState = defaultState, action: Actions): GameState => {\r\n  switch (action.type) {\r\n    case RESOLVE_GAME_STATE:\r\n      return action.payload;\r\n    case CLEAR:\r\n      return GameState.START;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { Action } from \"redux\";\r\nimport { ExtraArguments, State } from \"./\";\r\nimport { GameState } from \"../types\";\r\nimport { defaultDeck, deductScoreFirst, deductScoreStep } from \"../config\";\r\nimport {\r\n  resolveGameState,\r\n  resolveTheme,\r\n  resolveOpenCard,\r\n  resolveDeck,\r\n  closeCards,\r\n  resolveMatchedCards,\r\n  resolveMove,\r\n  resolveTime,\r\n  deductScore,\r\n  clear\r\n} from \"./actions\";\r\nimport {\r\n  getCards,\r\n  getOpenCards,\r\n  getOpenCardsImageIDs,\r\n  getMoves,\r\n  getScores,\r\n  getMatchedCards\r\n} from \"./selectors\";\r\nimport getDeck from '../utils/getDeck';\r\nimport shuffleDeck from '../utils/shuffleDeck';\r\n\r\nlet timer: any;\r\n\r\nexport type Thunk = (\r\n  dispatch: (action: Action | Thunk) => any,\r\n  getState: () => State,\r\n  extraArguments: ExtraArguments\r\n) => any;\r\n\r\nexport const delayAction = (func: any, time: number): Thunk => (dispatch, getState) => {\r\n  setTimeout(() => {\r\n    dispatch(func);\r\n  }, time);\r\n};\r\n\r\nexport const createDeck = (): Thunk => (dispatch, getState) => {\r\n  const deck = getDeck();\r\n  dispatch(resolveDeck(deck));\r\n};\r\n\r\nexport const shuffle = (): Thunk => (dispatch, getState) => {\r\n  const deck = getCards(getState());\r\n  const shuffledDeck = shuffleDeck(deck);\r\n  dispatch(resolveDeck(shuffledDeck));\r\n};\r\n\r\nexport const restart = (): Thunk => (dispatch, getState) => {\r\n  clearInterval(timer);\r\n  dispatch(clear());\r\n  dispatch(shuffle());\r\n};\r\n\r\nexport const handleOpenCard = (cardId: number): Thunk => (dispatch, getState) => {\r\n  const openCardsNumber = getOpenCards(getState()).length;\r\n  dispatch(resolveOpenCard(cardId));\r\n  if (openCardsNumber + 1 === 2) dispatch(checkMatch());\r\n}\r\n\r\nexport const checkMatch = (): Thunk => (dispatch, getState) => {\r\n  const openCards = getOpenCardsImageIDs(getState());\r\n  if (openCards[0] === openCards[1]) dispatch(handleMatch(openCards[0]));\r\n  else dispatch(handleNoMatch());\r\n  dispatch(resolveMove());\r\n  const moves = getMoves(getState());\r\n  const scores = getScores(getState());\r\n  if (scores === 0) return;\r\n  else if (\r\n    moves === deductScoreFirst ||\r\n    (moves > deductScoreFirst &&\r\n      (moves - deductScoreFirst) % deductScoreStep === 0)\r\n  ) {\r\n    dispatch(deductScore());\r\n  }\r\n};\r\n\r\nexport const handleMatch = (imageId: number): Thunk => (dispatch,getState) => {\r\n  dispatch(delayAction(resolveMatchedCards(imageId), 500));\r\n  const matchedCardsNumber = getMatchedCards(getState()).length;\r\n  if (matchedCardsNumber === 14) {\r\n    dispatch(delayAction(resolveGameState(GameState.END), 1200));\r\n    clearInterval(timer);\r\n  }\r\n};\r\n\r\nexport const handleNoMatch = (): Thunk => (dispatch, getState) => {\r\n  dispatch(delayAction(closeCards(), 1000));\r\n};\r\n\r\nexport const startTimer = (): Thunk => (dispatch, getState) => {\r\n  timer = setInterval(() => dispatch(resolveTime()), 1000);\r\n  dispatch(resolveGameState(GameState.GAME));\r\n};\r\n\r\nexport const pauseTimer = (): Thunk => (dispatch, getState) => {\r\n  clearInterval(timer);\r\n};\r\n\r\nexport const restartTimer = (): Thunk => (dispatch, getState) => {\r\n  timer = setInterval(() => dispatch(resolveTime()), 1000);\r\n};\r\n","import { Cards } from './types';\r\n\r\nexport const maxScore = 3; // if changed update in varibles.scss too\r\n\r\nexport const deductScoreFirst = 12;\r\n\r\nexport const deductScoreStep = 5;\r\n\r\nexport const defaultDeck = \"fruits\";\r\n\r\nexport const themes = [\r\n  {\r\n    name: \"fruits\",\r\n    images: [\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133258/memory-game/fruits/watermelon.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133258/memory-game/fruits/raspberry.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133258/memory-game/fruits/plum.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133257/memory-game/fruits/lemon.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133256/memory-game/fruits/grapes.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133256/memory-game/fruits/banana.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133256/memory-game/fruits/cherry.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1538133256/memory-game/fruits/avocado.svg\",\r\n    ],\r\n    style: {\r\n      open: 'white',\r\n      matched: '#f5f33dde'\r\n    }\r\n  },\r\n  {\r\n    name: \"developer\",\r\n    images: [\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855312/memory-game/dev/html-5.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855310/memory-game/dev/css.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855313/memory-game/dev/javascript.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855315/memory-game/dev/react.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855316/memory-game/dev/sass.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855317/memory-game/dev/typescript.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855311/memory-game/dev/github.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559855314/memory-game/dev/nodejs.svg\"\r\n    ],\r\n    style: {\r\n      open: '#3f4a43',\r\n      matched: '#f2f2f2'\r\n    }\r\n  },\r\n  {\r\n    name: \"cars\",\r\n    images: [\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109725/memory-game/cars/Skoda.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109728/memory-game/cars/Toyota.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109725/memory-game/cars/Nissan.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109725/memory-game/cars/Bmw.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109725/memory-game/cars/Opel.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109728/memory-game/cars/Volkswagen.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561110881/memory-game/cars/Tesla.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561109725/memory-game/cars/Mercedes.svg\"\r\n    ],\r\n    style: {\r\n      open: 'white',\r\n      matched: '#a8a8a8'\r\n    }\r\n  },\r\n  {\r\n    name: \"space\",\r\n    images: [\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854133/memory-game/space/space-ship.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854132/memory-game/space/solar-system.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854131/memory-game/space/saturn.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854130/memory-game/space/planet-earth.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854129/memory-game/space/jupiter.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854282/memory-game/space/comet-1.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854127/memory-game/space/venus.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1559854126/memory-game/space/ursa-major.svg\"\r\n    ],\r\n    style: {\r\n      open: 'white',\r\n      matched: '#556080'\r\n    }\r\n  },\r\n  {\r\n    name: \"dogs\",\r\n    images: [\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048757/memory-game/dogs/bergamasco.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048401/memory-game/dogs/rottweiler.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048401/memory-game/dogs/saint_bernard.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048354/memory-game/dogs/french_poodle.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048291/memory-game/dogs/french_bulldog.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048291/memory-game/dogs/008-corgi.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048291/memory-game/dogs/pug.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561048291/memory-game/dogs/bulldog.svg\"\r\n    ],\r\n    style: {\r\n      open: 'white',\r\n      matched: '#d3973885'\r\n    }\r\n  },\r\n  {\r\n    name: \"summer\",\r\n    images: [\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049519/memory-game/summer/umbrella.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049480/memory-game/summer/sunrise.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049520/memory-game/summer/flip_flops.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561050117/memory-game/summer/drink.png\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049519/memory-game/summer/bikini.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049480/memory-game/summer/palm.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049546/memory-game/summer/cocktail.svg\",\r\n      \"https://res.cloudinary.com/jutzee/image/upload/v1561049697/memory-game/summer/boat.png\"\r\n    ],\r\n    style: {\r\n      open: 'white',\r\n      matched: '#6ed5e2bd'\r\n    }\r\n  }\r\n] as Cards[];\r\n\r\nexport const basicCardStyle = {\r\n  open: 'orange',\r\n  matched: 'pink'\r\n}","import { Card, CardStatus } from '../../types';\r\nimport { Actions } from '../actionTypes';\r\nimport {\r\n  OPEN_CARD,\r\n  CLOSE_CARDS,\r\n  MATCH_CARDS,\r\n  RESOLVE_DECK,\r\n  CLEAR\r\n} from '../actionNames';\r\n\r\nconst defaultState: Card[] = [];\r\n\r\nexport default (state: Card[] = defaultState, action: Actions): Card[] => {\r\n  switch (action.type) {\r\n    case RESOLVE_DECK:\r\n        return action.payload;\r\n    case OPEN_CARD:\r\n      return state.map(card =>\r\n        card.cardId === action.payload\r\n          ? { ...card, status: CardStatus.OPEN }\r\n          : card\r\n      );\r\n    case CLOSE_CARDS:\r\n      return state.map(card =>\r\n        card.status === CardStatus.OPEN\r\n          ? { ...card, status: CardStatus.CLOSED }\r\n          : card\r\n      );\r\n    case MATCH_CARDS:\r\n      return state.map(card =>\r\n        card.imageId === action.payload\r\n          ? { ...card, status: CardStatus.MATCHED }\r\n          : card\r\n      );\r\n    case CLEAR:\r\n      return state.map(card => ({ ...card, status: CardStatus.CLOSED }) );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport gameState from './gameState';\r\nimport theme from './theme';\r\nimport cards from './cards';\r\nimport moves from './moves';\r\nimport timer from './timer';\r\nimport scores from './scores';\r\n\r\nexport default combineReducers({\r\n  gameState,\r\n  theme,\r\n  cards,\r\n  moves,\r\n  timer,\r\n  scores\r\n});\r\n","export const RESOLVE_GAME_STATE = \"RESOLVE_GAME_STATE\";\r\nexport const RESOLVE_THEME = \"RESOLVE_THEME\";\r\nexport const RESOLVE_CARD = \"RESOLVE_CARD\";\r\nexport const RESOLVE_DECK = \"RESOLVE_DECK\";\r\nexport const OPEN_CARD = \"OPEN_CARD\";\r\nexport const CLOSE_CARDS = \"CLOSE_CARDS\";\r\nexport const MATCH_CARDS = \"MATCH_CARDS\";\r\nexport const RESOLVE_MOVE = \"RESOLVE_MOVE\";\r\nexport const RESOLVE_TIME = \"RESOLVE_TIME\";\r\nexport const RESOLVE_PAUSE = \"RESOLVE_PAUSE\";\r\nexport const DEDUCT_SCORE = \"DEDUCT_SCORE\";\r\nexport const CLEAR = \"CLEAR\";\r\n","import { RESOLVE_THEME } from '../actionNames';\r\nimport { Actions } from '../actionTypes';\r\nimport { defaultDeck } from './../../config';\r\n\r\nconst defaultState = defaultDeck;\r\n\r\nexport default (state: string = defaultState, action: Actions): string => {\r\n  switch (action.type) {\r\n    case RESOLVE_THEME:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { RESOLVE_MOVE, CLEAR } from '../actionNames';\r\nimport { Actions } from '../actionTypes';\r\n\r\nexport default (state: number = 0, action: Actions): number => {\r\n  switch (action.type) {\r\n    case RESOLVE_MOVE:\r\n      return state + 1;\r\n    case CLEAR:\r\n      return 0;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { RESOLVE_TIME, CLEAR } from \"../actionNames\";\r\nimport { Actions } from \"../actionTypes\";\r\n\r\nexport default (state: number = 0, action: Actions): number => {\r\n  switch (action.type) {\r\n    case RESOLVE_TIME:\r\n      return state + 1;\r\n    case CLEAR:\r\n      return 0;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { DEDUCT_SCORE, CLEAR } from '../actionNames';\r\nimport { Actions } from '../actionTypes';\r\nimport { maxScore } from './../../config';\r\n\r\nconst defaultState = maxScore;\r\n\r\nexport default (state: number = defaultState, action: Actions): number => {\r\n  switch (action.type) {\r\n    case DEDUCT_SCORE:\r\n      return state - 1;\r\n    case CLEAR:\r\n      return defaultState;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst extraArguments = { };\r\nexport type ExtraArguments = typeof extraArguments;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk.withExtraArgument(extraArguments))));\r\n\r\nexport type State = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;","import { action } from 'typesafe-actions';\r\nimport * as actionNames from './actionNames';\r\nimport { GameState, Card } from '../types';\r\n\r\nexport const resolveGameState = (gameState: GameState) =>\r\n  action(actionNames.RESOLVE_GAME_STATE, gameState);\r\nexport const resolveTheme = (theme: string) => action(actionNames.RESOLVE_THEME, theme);\r\nexport const resolveDeck = (deck: Card[]) => action(actionNames.RESOLVE_DECK, deck);\r\nexport const resolveOpenCard = (cardId: number) => action(actionNames.OPEN_CARD, cardId);\r\nexport const closeCards = () => action(actionNames.CLOSE_CARDS);\r\nexport const resolveMatchedCards = (imageId: number) => action(actionNames.MATCH_CARDS, imageId);\r\nexport const resolveMove = () => action(actionNames.RESOLVE_MOVE);\r\nexport const resolveTime = () => action(actionNames.RESOLVE_TIME);\r\nexport const resolvePause = (pause: boolean) => action(actionNames.RESOLVE_PAUSE, pause);\r\nexport const deductScore = () => action(actionNames.DEDUCT_SCORE);\r\nexport const clear = () => action(actionNames.CLEAR);","import { State } from './';\r\nimport { createSelector } from 'reselect';\r\nimport { CardStatus } from '../types';\r\n\r\nexport const getGameState = (state: State) => state.gameState;\r\n\r\nexport const getTheme = (state: State) => state.theme;\r\n\r\nexport const getCards = (state: State) => state.cards;\r\n\r\nexport const getOpenCards = createSelector(\r\n  getCards,\r\n  cards => cards.filter(card => card.status === CardStatus.OPEN)\r\n);\r\n\r\nexport const getOpenCardsCardIDs = createSelector(\r\n  getOpenCards,\r\n  cards => cards.map(card => card.cardId)\r\n);\r\n\r\nexport const getOpenCardsImageIDs = createSelector(\r\n  getOpenCards,\r\n  cards => cards.map(card => card.imageId)\r\n);\r\n\r\nexport const getMatchedCards = createSelector(\r\n  getCards,\r\n  cards => cards.filter(card => card.status === CardStatus.MATCHED)\r\n);\r\n\r\nexport const getMatchedCardImageIDs = createSelector(\r\n  getMatchedCards,\r\n  cards => cards.map(card => card.imageId)\r\n);\r\n\r\nexport const getMoves = (state: State) => state.moves;\r\n\r\nexport const getScores = (state: State) => state.scores;\r\n\r\nexport const getTimer = (state: State) => state.timer;\r\n\r\nexport const getMinutes = createSelector(\r\n  getTimer,\r\n  seconds => Math.floor(seconds / 60)\r\n);\r\n\r\nexport const getSeconds = createSelector(\r\n  [getTimer, getMinutes],\r\n  (seconds, minutes) => seconds - minutes * 60\r\n);\r\n","import { Card } from '../types';\r\n\r\nexport default (deck: Card[]): Card[] => {\r\n  let shuffledDeck = deck.slice();\r\n  \r\n  let currentIndex = shuffledDeck.length;\r\n  var temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = shuffledDeck[currentIndex];\r\n    shuffledDeck[currentIndex] = shuffledDeck[randomIndex];\r\n    shuffledDeck[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return shuffledDeck;\r\n}","import { Card } from '../types';\r\nimport createDeck from '../utils/createDeck';\r\nimport shuffleDeck from '../utils/shuffleDeck';\r\n\r\nexport default (): Card[] => {\r\n  const newDeck = createDeck();\r\n  return shuffleDeck(newDeck);\r\n};\r\n","import { Card, CardStatus } from '../types';\r\n\r\nexport default (): Card[] => {\r\n  const arr = Array.from(Array(8), (x, i) => i);\r\n  const imageIds = arr.reduce((sum, _, i) => [...sum, i, i], [] as number[]);\r\n  const cards = imageIds.map((id, i) => ({\r\n    imageId: id,\r\n    cardId: i,\r\n    status: CardStatus.CLOSED\r\n  }));\r\n  return cards;\r\n};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport classnames from \"classnames\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport \"./Modal.scss\";\r\n\r\nexport type ModalProps = {\r\n  title?: string;\r\n  isOpen?: boolean;\r\n  onClose?: Function;\r\n  modalClassName?: string;\r\n};\r\n\r\nclass Modal extends React.PureComponent<ModalProps> {\r\n  static defaultProps = {\r\n    isOpen: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  handleClose = () => {\r\n    const { onClose } = this.props;\r\n    if (onClose) onClose();\r\n  };\r\n\r\n  handleClick = (event: any) => {\r\n    if (this.refs.modal && !(this.refs.modal as Node).contains(event.target)) {\r\n      this.handleClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { children, title, isOpen, modalClassName, onClose } = this.props;\r\n    if (!isOpen) return null;\r\n    const Modal = (\r\n      <div className=\"ModalContainer\" ref=\"modal\">\r\n        <Paper className={classnames(\"Modal\", modalClassName)}>\r\n          <header>\r\n            { title && \r\n              <span className=\"title\">{title}</span>\r\n            }\r\n            {onClose && <i className=\"far fa-times-circle\" onClick={this.handleClose} />}\r\n          </header>\r\n          <main>{children}</main>\r\n        </Paper>\r\n      </div>\r\n    );\r\n    return ReactDOM.createPortal(Modal, document.getElementById(\r\n      \"modal\"\r\n    ) as any);\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport { State } from '../store';\r\nimport { GameState } from '../types';\r\nimport { getGameState } from './../store/selectors';\r\nimport { restart, pauseTimer, restartTimer } from '../store/actions';\r\n\r\nimport PauseModal from './PauseModal';\r\nimport RestartModal from './RestartModal';\r\nimport './DashboardButtons.scss';\r\n\r\nexport enum OpenModal {\r\n  PAUSE = 'pause',\r\n  RESTART = 'restart'\r\n}\r\n\r\nexport type DashboardButtonsProps = {\r\n  gameState: GameState;\r\n  restart: typeof restart;\r\n  pauseTimer: typeof pauseTimer;\r\n  restartTimer: typeof restartTimer;\r\n};\r\n\r\nexport type DashboardButtonsState = {\r\n  openModal: OpenModal | null;\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  gameState: getGameState(state)\r\n});\r\n\r\nconst mapDispatchToProps = { restart, pauseTimer, restartTimer };\r\n\r\nclass DashboardButtons extends React.PureComponent<DashboardButtonsProps> {\r\n  state = {\r\n    openModal: null\r\n  };\r\n\r\n  handleOpenRestartModal = () => {\r\n    this.props.pauseTimer();\r\n    this.setState({ openModal: OpenModal.RESTART });\r\n  };\r\n\r\n  handleCloseRestartModal = () => {\r\n    this.props.restartTimer();\r\n    this.setState({ openModal: null });\r\n  };\r\n\r\n  handleRestart = () => {\r\n    const { gameState, restart } = this.props;\r\n    if (gameState === GameState.START) return;\r\n    this.setState({ openModal: null });\r\n    restart();\r\n  };\r\n\r\n  handlePause = () => {\r\n    const { gameState, pauseTimer, restartTimer } = this.props;\r\n    if (gameState === GameState.START || gameState === GameState.END) return;\r\n    else if (\r\n      gameState === GameState.GAME &&\r\n      this.state.openModal !== OpenModal.PAUSE\r\n    ) {\r\n      this.setState({ openModal: OpenModal.PAUSE });\r\n      pauseTimer();\r\n      return;\r\n    }\r\n    this.setState({ openModal: null });\r\n    restartTimer();\r\n  };\r\n\r\n  render() {\r\n    const { gameState } = this.props;\r\n    const { openModal } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <PauseModal\r\n          isOpen={openModal === OpenModal.PAUSE}\r\n          onClose={this.handlePause}\r\n        />\r\n\r\n        <RestartModal\r\n          isOpen={openModal === OpenModal.RESTART}\r\n          onClose={this.handleCloseRestartModal}\r\n          onSubmit={this.handleRestart}\r\n        />\r\n\r\n        <div\r\n          className={classnames('DashboardButtons',\r\n            gameState === GameState.START || gameState === GameState.END\r\n              ? 'disabled'\r\n              : ''\r\n          )}\r\n        >\r\n          <div className='pause-button' onClick={this.handlePause}>\r\n            {openModal === OpenModal.PAUSE ? (\r\n              <i className='fas fa-play' />\r\n            ) : (\r\n              <i className='fas fa-pause' />\r\n            )}\r\n          </div>\r\n          <div className='restart-button' onClick={this.handleOpenRestartModal}>\r\n            <i className='fas fa-redo-alt' />\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DashboardButtons);\r\n","import React from \"react\";\r\nimport classnames from 'classnames';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport \"./MyButton.scss\";\r\n\r\nexport type MyButtonProps = {\r\n  text: string;\r\n  color?: \"primary\" | \"inherit\" | \"secondary\" | \"default\" | undefined;\r\n  centered?: boolean;\r\n  marginTop?: boolean;\r\n  marginBottom?: boolean;\r\n  onClick?: () => void;\r\n};\r\n\r\nclass MyButton extends React.PureComponent<MyButtonProps> {\r\n  handleClick = () => {\r\n    const { onClick } = this.props;\r\n    if (onClick) onClick();\r\n  }\r\n\r\n  render() {\r\n    const { text, centered, color, marginTop, marginBottom } = this.props;\r\n    return (\r\n      <Button variant=\"contained\" color={classnames(color && color) as any} className={classnames(\"MyButton\", centered && 'centered', marginTop && 'marginTop', marginBottom && 'marginBottom')} onClick={this.handleClick}>\r\n        {text}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyButton;\r\n","import React from 'react';\r\nimport getThemeStyle from '../utils/getThemeStyle';\r\nimport './Card.scss';\r\n\r\nexport type CardProps = {\r\n  url: string;\r\n  theme: string;\r\n  open?: boolean;\r\n  matched?: boolean;\r\n  onClick?: Function;\r\n};\r\n\r\nclass Card extends React.PureComponent<CardProps> {\r\n  handleClick = () => {\r\n    const { onClick } = this.props;\r\n    if (onClick) onClick();\r\n  };\r\n\r\n  render() {\r\n    const { open, matched, url } = this.props;\r\n    const style = getThemeStyle(this.props.theme);\r\n    return (\r\n      <div\r\n        onClick={this.handleClick}\r\n        style={{ backgroundColor: open ? style.open : matched ? style.matched : 'black' }}\r\n        className=\"Card\"\r\n      >\r\n        <img src={url} alt=\"\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import { Cards, CardStyle } from '../types';\r\nimport { themes, basicCardStyle } from '../config';\r\n\r\nexport default (theme: string): CardStyle => {\r\n  const image = themes.find((t: Cards) => t.name === theme);\r\n  return image ? image.style : basicCardStyle;\r\n}","import React from \"react\";\r\nimport { Cards } from \"../types\";\r\nimport { themes } from \"../config\";\r\n\r\nimport Card from './Card';\r\nimport \"./ThemePreview.scss\";\r\n\r\nexport type ThemePreviewProps = {\r\n  selectedOption: string;\r\n};\r\n\r\nexport default class ThemePreview extends React.PureComponent<\r\n  ThemePreviewProps\r\n> {\r\n  render() {\r\n    const { selectedOption } = this.props;\r\n    const theme = themes.find((t: Cards) => t.name === selectedOption);\r\n    if (!theme) return [];\r\n    const urls = theme.images;\r\n    return (\r\n      <div className=\"ThemePreview\">\r\n        <div className=\"grid\">\r\n          {urls.map((url, index) => (\r\n            <Card key={index} url={url} matched theme={theme.name} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { State } from \"../store\";\r\nimport Select from \"react-select\";\r\nimport { themes, defaultDeck } from \"../config\";\r\nimport { getTheme } from './../store/selectors';\r\n\r\nimport ThemePreview from \"./ThemePreview\";\r\n\r\nexport type ThemeSelectProps = {\r\n  onChange: Function;\r\n  theme: string;\r\n};\r\n\r\nexport type ThemeSelectState = {\r\n  selectedOption: string;\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  theme: getTheme(state)\r\n});\r\n\r\nconst options = themes.map(image => ({\r\n  value: image.name,\r\n  label: image.name.charAt(0).toUpperCase() + image.name.slice(1)\r\n}));\r\n\r\n\r\nclass ThemeSelect extends React.PureComponent<ThemeSelectProps, ThemeSelectState> {\r\n  state = {\r\n    selectedOption: this.props.theme\r\n  }\r\n\r\n  getDefaultValue = () => {\r\n    const defaultValue = options.find(option => option.value === this.props.theme);\r\n    return defaultValue;\r\n  };\r\n\r\n  handleChange = (selectedOption: any) => {\r\n    this.setState({ selectedOption: selectedOption.value });\r\n    if (this.props.onChange) this.props.onChange(selectedOption);\r\n  };\r\n\r\n  render() {\r\n    const { selectedOption } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Select options={options} onChange={this.handleChange} defaultValue={this.getDefaultValue()}/>\r\n        <ThemePreview selectedOption={selectedOption}/>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(ThemeSelect);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { resolveTheme } from \"../store/actions\";\r\n\r\nimport Modal from \"./Modal\";\r\nimport MyButton from \"./MyButton\";\r\nimport ThemeSelect from \"./ThemeSelect\";\r\nimport \"./StartModal.scss\";\r\n\r\nexport type StartModalProps = {\r\n  isOpen: boolean;\r\n  onClose: Function;\r\n  resolveTheme: typeof resolveTheme;\r\n};\r\n\r\nconst mapDispatchToProps = { resolveTheme };\r\n\r\nclass StartModal extends React.PureComponent<StartModalProps> {\r\n  handleChange = (selectedOption: any) => {\r\n    this.props.resolveTheme(selectedOption.value);\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    this.props.onClose();\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.props;\r\n    if (!isOpen) return null;\r\n    return (\r\n      <Modal isOpen={isOpen} title=\"Start\" modalClassName=\"StartModal\">\r\n        <div className=\"text\">\r\n          Find all 8 pairs of cards in the least number of moves and time.\r\n        </div>\r\n        <div className=\"theme-selector-container\">\r\n          <span>Choose a theme</span>\r\n          <ThemeSelect onChange={this.handleChange} />\r\n        </div>\r\n        <MyButton color=\"primary\" text=\"Start\" centered onClick={this.handleSubmit} />\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(StartModal);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../store\";\r\nimport { getScores } from \"../store/selectors\";\r\nimport { maxScore } from \"../config\";\r\nimport \"./Stars.scss\";\r\n\r\nexport type StarsProps = {\r\n  scores: number;\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  scores: getScores(state)\r\n});\r\n\r\nclass Stars extends React.PureComponent<StarsProps> {\r\n  render() {\r\n    const { scores: full } = this.props;\r\n    const empty = maxScore - full;\r\n    return (\r\n      <div className=\"Stars\">\r\n        <div className=\"star-container\">\r\n          {[...Array(full)].map((e, i) => (\r\n            <i className={classnames(\"fas fa-star\", \"star\")} key={`fullStar-${i}`}/>\r\n          ))}\r\n          {[...Array(empty)].map((e, i) => (\r\n            <i className={classnames(\"far fa-star\", \"star\")} key={`emptyStar-${i}`}/>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Stars);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../store\";\r\nimport {\r\n  getMinutes,\r\n  getSeconds,\r\n  getMoves\r\n} from \"./../store/selectors\";\r\nimport { restart } from '../store/actions';\r\n\r\nimport Modal from \"./Modal\";\r\nimport Stars from \"./Stars\";\r\nimport MyButton from \"./MyButton\";\r\nimport \"./EndModal.scss\";\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  min: getMinutes(state),\r\n  sec: getSeconds(state),\r\n  moves: getMoves(state),\r\n});\r\n\r\nexport type EndModalProps = {\r\n  isOpen: boolean;\r\n  min: number;\r\n  sec: number;\r\n  moves: number;\r\n  restart: typeof restart;\r\n};\r\n\r\nconst mapDispatchToProps = { restart };\r\n\r\nclass EndModal extends React.PureComponent<EndModalProps> {\r\n  handleSubmit = () => {\r\n    const { restart } = this.props;\r\n    restart();\r\n  };\r\n\r\n  render() {\r\n    const { isOpen, min, sec, moves } = this.props;\r\n    if (!isOpen) return null;\r\n\r\n    const time = `${min ? (min > 1 ? \" minutes\" : \" minute\") : \"\"} ${sec} ${\r\n      sec > 1 ? \"seconds\" : \"second\"\r\n    }`;\r\n\r\n    return (\r\n      <Modal\r\n        isOpen={isOpen}\r\n        title=\"Congratulations!\"\r\n        modalClassName=\"EndModal\"\r\n      >\r\n        <div className=\"info\">\r\n          You won with <span>{moves} moves</span> in <span>{time}</span>\r\n        </div>\r\n        <Stars />\r\n        <MyButton color=\"primary\" text=\"Start new game\" centered marginTop onClick={this.handleSubmit} />\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(EndModal);\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../store\";\r\nimport { getMinutes, getSeconds } from './../store/selectors';\r\nimport './Timer.scss';\r\n\r\nexport type TimerProps = {\r\n  min: number;\r\n  sec: number;\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  min: getMinutes(state),\r\n  sec: getSeconds(state)\r\n});\r\n\r\nclass Timer extends React.PureComponent<TimerProps> {\r\n  render() {\r\n    const { min, sec } = this.props;\r\n    return (\r\n      <div className='Timer'>{`${String(min).padStart(2, '0')} : ${String(sec).padStart(2, '0')}`}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Timer);\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../store\";\r\nimport { getMoves } from './../store/selectors';\r\nimport Stars from './Stars';\r\nimport './Moves.scss';\r\n\r\nexport type MovesProps = {\r\n  moves: number;\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  moves: getMoves(state)\r\n});\r\n\r\nclass Moves extends React.PureComponent<MovesProps> {\r\n  render() {\r\n    const { moves } = this.props;\r\n    \r\n    return (\r\n      <div className='Moves'>\r\n        <Stars />\r\n        <div className='move-counter'>\r\n          <span className='move-value'>{moves}</span><span className='move-text'>{`Move${moves > 1 ? 's' : ''}`}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Moves);\r\n","import React from 'react';\r\nimport Modal from './Modal';\r\n\r\nexport type PauseModalProps = {\r\n  isOpen: boolean;\r\n  onClose: Function;\r\n}\r\n\r\nclass PauseModal extends React.PureComponent<PauseModalProps> {\r\n  handleClose = () => {\r\n    if (this.props.onClose) this.props.onClose();\r\n  };\r\n  \r\n  render() {\r\n    const { isOpen } = this.props;\r\n    if (!isOpen) return null;\r\n    return (\r\n      <Modal isOpen={isOpen} onClose={this.handleClose} title=\"Pause\">\r\n        <div>\r\n          Game paused\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PauseModal;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { restart } from '../store/actions';\r\n\r\nimport Modal from \"./Modal\";\r\nimport MyButton from \"./MyButton\";\r\n\r\nexport type RestartModalProps = {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: () => void;\r\n};\r\n\r\nconst mapDispatchToProps = { restart };\r\n\r\nclass RestartModal extends React.PureComponent<RestartModalProps> {\r\n  handleSubmit = () => {\r\n    const { onSubmit } = this.props;\r\n    onSubmit();\r\n  };\r\n\r\n  render() {\r\n    const { isOpen, onClose } = this.props;\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <Modal isOpen={isOpen} onClose={onClose} title=\"Restart\" >\r\n        Are you sure you want to restart the game?\r\n        <MyButton color=\"primary\" text=\"Yes, restart\" centered marginTop onClick={this.handleSubmit} />\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(RestartModal);\r\n","import React from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport Moves from \"./Moves\";\r\nimport DashboardButtons from \"./DashboardButtons\";\r\nimport \"./Dashboard.scss\";\r\n\r\nclass Dashboard extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <div className='dashboard-container'>\r\n          <DashboardButtons />\r\n          <Timer />\r\n          <Moves />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport { State } from '../store';\r\nimport { Card as CardType, GameState } from '../types';\r\nimport {\r\n  getOpenCardsCardIDs,\r\n  getMatchedCardImageIDs,\r\n  getGameState,\r\n  getTheme\r\n} from '../store/selectors';\r\nimport { handleOpenCard, startTimer } from '../store/actions';\r\nimport getThemeImageUrls from '../utils/getThemeImageUrls';\r\n\r\nimport Card from './Card';\r\nimport './CardContainer.scss';\r\n\r\nexport type CardContainerProps = {\r\n  card: CardType;\r\n  openCards: number[];\r\n  matchedCards: number[];\r\n  gameState: GameState;\r\n  theme: string;\r\n  handleOpenCard: typeof handleOpenCard;\r\n  startTimer: typeof startTimer;\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  openCards: getOpenCardsCardIDs(state),\r\n  matchedCards: getMatchedCardImageIDs(state),\r\n  gameState: getGameState(state),\r\n  theme: getTheme(state)\r\n});\r\n\r\nconst mapDispatchToProps = { handleOpenCard, startTimer };\r\n\r\nclass CardContainer extends React.PureComponent<CardContainerProps> {\r\n  timer: NodeJS.Timeout | null = null;\r\n\r\n  handleClick = () => {\r\n    const { card, openCards, gameState, startTimer } = this.props;\r\n    if (openCards.length < 2)\r\n      this.props.handleOpenCard(card.cardId);\r\n    if (gameState === GameState.START) {\r\n      startTimer();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { card, openCards, matchedCards, theme } = this.props;\r\n    if (!card) return null;\r\n    \r\n    const url = getThemeImageUrls(theme)[card.imageId];\r\n    const open = openCards.includes(card.cardId);\r\n    const matched = matchedCards.includes(card.imageId);\r\n\r\n    return (\r\n      <div\r\n        className={classnames('CardContainer', (open || matched) && 'disabled')}\r\n      >\r\n        <Card\r\n          url={url}\r\n          open={open}\r\n          matched={matched}\r\n          theme={theme}\r\n          onClick={this.handleClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CardContainer);\r\n","import { Cards } from '../types';\r\nimport { themes, defaultDeck } from '../config';\r\n\r\nexport default (theme: string): string[] => {\r\n  const image = themes.find((t: Cards) => t.name === theme);\r\n  return image ? image.images : themes.find((t: Cards) => t.name === defaultDeck)!.images;\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../store\";\r\nimport { GameState, Card } from \"../types\";\r\nimport { shuffle } from \"../store/actions\";\r\nimport { getCards, getGameState, getTheme } from \"../store/selectors\";\r\n\r\nimport CardContainer from \"./CardContainer\";\r\nimport \"./Deck.scss\";\r\n\r\nexport type DeckProps = {\r\n  theme: string;\r\n  deck: Card[];\r\n  gameState: GameState;\r\n  shuffle: typeof shuffle;\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  theme: getTheme(state),\r\n  deck: getCards(state),\r\n  gameState: getGameState(state),\r\n});\r\n\r\nconst mapDispatchToProps = { shuffle };\r\n\r\nclass Deck extends React.PureComponent<DeckProps> {\r\n  componentDidUpdate(prevProps: DeckProps) {\r\n    // shuffle deck when new game starts\r\n    if (\r\n      this.props.gameState !== prevProps.gameState &&\r\n      this.props.gameState === GameState.START\r\n    ) {\r\n      this.props.shuffle();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { deck } = this.props;\r\n    if (deck.length === 0) return null;\r\n    return (\r\n      <div className=\"Deck\">\r\n        <div className=\"grid-container\">\r\n          <div className=\"card-grid\">\r\n            {deck.map((card, index) => (\r\n              <CardContainer key={index} card={card} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Deck);\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { State } from \"../store\";\r\nimport { GameState } from \"../types\";\r\nimport { createDeck, clear } from \"../store/actions\";\r\nimport { getGameState } from './../store/selectors';\r\n\r\nimport StartModal from './StartModal';\r\nimport EndModal from './EndModal';\r\nimport Dashboard from \"./Dashboard\";\r\nimport Deck from \"./Deck\";\r\nimport \"./App.scss\";\r\n\r\nexport type AppState = {\r\n  start: boolean;\r\n}\r\n\r\nexport type AppProps = {\r\n  createDeck: typeof createDeck;\r\n  clear: typeof clear;\r\n  gameState: GameState;\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  gameState: getGameState(state)\r\n});\r\n\r\nconst mapDispatchToProps = { createDeck, clear };\r\n\r\nclass App extends React.PureComponent<AppProps, AppState> {\r\n  state = {\r\n    start: true,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.createDeck();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: AppProps) {\r\n    if (\r\n      this.props.gameState !== prevProps.gameState &&\r\n      this.props.gameState === GameState.START\r\n    ) {\r\n      this.setState({ start: true });\r\n    }\r\n  }\r\n\r\n  handleStartClose = () => {\r\n    this.setState({ start: false });\r\n  }\r\n\r\n  render() {\r\n    const { start } = this.state;\r\n    const { gameState } = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <StartModal isOpen={start} onClose={this.handleStartClose}/>\r\n        <h1 className=\"title\">Memory Game</h1>\r\n        <div className=\"game-container\">\r\n          <Dashboard />\r\n          <Deck />\r\n        </div>\r\n        <EndModal isOpen={gameState === GameState.END} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.scss'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}